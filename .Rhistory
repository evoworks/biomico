library(qvalue)
qvalue.gui()
library(qvalue)
p=scan("/Users/kathy/Desktop/for_joe/")
p=scan("/Users/kathy/Desktop/for_joe/pvalues_covarionsym_totest.txt")
qobj=qvalue(p)
qobj=qvalue(p, lamda=.2, fdr.level=0.05)
qwrite(qobj, filename="qvalues_forsymcov.txt"
)
qwrite(qobj, filename="qvalues_forsymcov.txt")
qobj=qvalue(p, lamda=.1, fdr.level=0.05)
qobj=qvalue(p, lamda=.5, fdr.level=0.05)
qwrite(qobj, filename="qvalues_forsymcov.5.txt")
qobj=qvalue(p, lamda=.8, fdr.level=0.05)
qwrite(qobj, filename="qvalues_forsymcov.8.txt")
qobj
qvalue
qvalues
qobj
qobj=qvalue(p)
qobj
qobj<-qvalue(p)
qobj
q()
load(vegan)
install.packages("vegan")
specpool
specpool()
library(vegan)
specpool()
specpool(data)
data
T
j
load(vegan)
library(vegan)
q()
q()
load("~/Documents/project/microbiome/biomenet_test_run/K3_L100.RData")
sample.names
q()
load("~/Desktop/carnivore_herbivore_network_with_all_RPAIRs_no_pathway.RData")
network.files
Reactions
q()
load("~/Documents/project/coastal_ocean_bedford_basin/new_data_aug_2013/train_by_depth/predictionImage_trained_by1m_test_1by1.RData")
Count.G.V
Count.G.V[[2]]
load("~/Documents/project/coastal_ocean_bedford_basin/new_data_aug_2013/train_by_depth/trainImage_by1m.RData")
alpha.phi.train
train.draws[[20]]
train.draws
train.draws[20,20]
train.draws(dim)
dim(tran.draws)
alpha.theta.mat.train
View(test.X)
View(TRAIN.Mat)
alpha.phi.train
View(alpha.theta.mat.train)
train.draws
train.draws[20][20]
train.draws[20]
write.table(train.draws[20], file="train_info", quotes=TRUE)
write.table(train.draws[20], file="train_info", quote=TRUE)
load("~/Documents/project/biomico_simulations/simulation-info.RData")
alpha.phi
alpha.theta
sink.ix
phi.mat
pi.mat
theta.mat
dataset.mat
metadata
load("~/Documents/project/biomico_simulations/SourceTrackerNEXT-Exp.RData")
results.X
results
length(results$test.X)
results$test.X[[20]]
predictions=round(results$test.X[[20]]/rowSums(results$test.X[[20]]),3)
predictions
load("~/Documents/project/biomico_simulations/simulation-info.RData")
phi.mat
pi.mat
env.names
envs.names
draws
draw.num
draws.num
load("~/Documents/project/biomico_simulations/SourceTrackerNEXT-Exp.RData")
draws.num
draws.num=length(results$test.X)
draws.num
test.num = dim(results$test.X[[1]])[1]
est.pi.mat.lst = list()
est.pi.mat.lst
list()
test.num
est.pi.mat.lst[[20]] = results$test.X[[20]]
for ( i in 1:test.num) est.pi.mat.lst[[20]][i,] = est.pi.mat.lst[[20]][i,] / sum(est.pi.mat.lst[[20]][i,])
for ( i in 1:test.num) Expr.JSD.list[20] = Expr.JSD.list[20] + JSD(est.pi.mat.lst[[20]][i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD.list[20] = Expr.JSD.list[20]/test.num
Expr.JSD.list = rep(0, 20)
for ( i in 1:test.num) JSD(est.pi.mat.lst[[20]][i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD = Expr.JSD.list[20]/test.num
Expr.JSD.list = rep(0, 20)
for ( i in 1:test.num) Expr.JSD.list[20] = Expr.JSD.list[20] + JSD(est.pi.mat.lst[[20]][i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD.list[20] = Expr.JSD.list[20]/test.num
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
Expr.JSD.list = rep(0, 20)
for ( i in 1:test.num) Expr.JSD.list[20] = Expr.JSD.list[20] + JSD(est.pi.mat.lst[[20]][i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD.list[20] = Expr.JSD.list[20]/test.num
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
test.num = dim(results$test.X[[1]])[1]
est.pi.mat
est.pi.mat[[20]] = results$test.X[[20]]
pi.mat
est.pi.mat
est.pi.mat=results$test.X[[20]]
est.pi.mat
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
test.num = dim(results$test.X[[1]])[1]
est.pi.mat
est.pi.mat = results$test.X[[20]]
for ( i in 1:test.num) est.pi.mat[i,] = est.pi.mat[i,] / sum(est.pi.mat[i,])
Expr.JSD
for ( i in 1:test.num) Expr.JSD = Expr.JSD + JSD(est.pi.mat[i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD = Expr.JSD/test.num
pi.mat
pi.mat[test.ix[i]]
load("~/Documents/project/biomico_simulations/simulation-info.RData")
load("~/Documents/project/biomico_simulations/SourceTrackerNEXT-Exp.RData")
pi.mat
pi.mat(test.ix)
pi.mat
pi.mat[test.x[i]]
pi.mat[test.x[1]]
pi.mat[test.ix[1]]
test.num=103
est.pi.mat = results$test.X[[20]]
for ( i in 1:test.num) est.pi.mat[i,] = est.pi.mat[i,] / sum(est.pi.mat[i,])
est.pi.mat
for ( i in 1:test.num) Expr.JSD = Expr.JSD + JSD(est.pi.mat[i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
for ( i in 1:test.num) Expr.JSD = Expr.JSD + JSD(est.pi.mat[i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
for ( i in 1:test.num) Expr.JSD = JSD(est.pi.mat[i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD = Expr.JSD/test.num
Expr.JSD
dim(results$test.X[[1]])[1]
alpha.phi
results$train.X
reslts
results
results$train.draw[20][20]
theta.mat
load("~/Documents/project/biomico_simulations/SourceTrackerNEXT-Exp.RData")
desc
envs
results$theta
results$train.draws
results$train.draws[[20]]
results$Count.T.G
results$Count.S.V
results$Count.G.V
sourcetrackerNEXT
results$Count.T.G[[20]]
est.phi=t(Count.T.G[[20]])
for(i in 1:100) est.phi[i,]=(est.phi[i,]+0.01)/sum(est.phi[i,]+0.01)
est.phi=t(results$Count.T.G[[20]])
for(i in 1:100) est.phi[i,]=(est.phi[i,]+0.01)/sum(est.phi[i,]+0.01)
est.phi=t(results$Count.T.G[[20]])
for(i in 1:100) est.phi[i,]=(est.phi[i,]+0.01)/sum(est.phi[i,]+0.01)
est.phi
for(i in 1:5) est.phi[i,]=(est.phi[i,]+0.01)/sum(est.phi[i,]+0.01)
est.phi
num.otu
est20.rho=t(results$Count.G.V[[20]])
for(i in 1:4) est20.rho[i,]=(est20.rho[i,]+0.01)/sum(est20.rho[i,]+0.01)
est20.rho
load("~/Documents/project/biomico_simulations/simulation-info.RData")
alpha.phi
alpha.theta
community.names
for(i in 1:6) est.phi[i,]=(est.phi[i,]+0.01)/sum(est.phi[i,]+0.01)
for(i in 1:5) est.phi[i,]=(est.phi[i,]+0.01)/sum(est.phi[i,]+0.01)
est20.rho=t(results$Count.G.V[[20]])
for(i in 1:5) est20.rho[i,]=(est20.rho[i,]+0.01)/sum(est20.rho[i,]+0.01)
est20.rho=t(results$Count.G.V[[20]])
for(i in 1:4) est20.rho[i,]=(est20.rho[i,]+0.01)/sum(est20.rho[i,]+0.01)
envs.nnames
envs.names
envs.info
simulated.metadata.file
simulated.otus.file
est20.rho
metadata
pi.mat
theta.mat
est20.rho
est.phi
est20.rho
theta.mat
pi.mat
otu
samples.OTU.counts
otus
dataset.mat
est.phi.mat = t(results$Count.T.G[[20]])
for ( i in 1:num.communities) est.phi.mat[i,] = est.phi.mat[i,] / sum(est.phi.mat[i,])
est.phi.mat
for ( i in 1:500) Expr.JSD.theta = JSD(est.phi.mat[i,]+0.0000001, theta.mat[test.ix[i], sort(colnames(theta.mat)) ]+0.0000001)
Expr.JSD.theta = Expr.JSD.theta/500
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
for ( i in 1:500) Expr.JSD.theta = JSD(est.phi.mat[i,]+0.0000001, theta.mat[test.ix[i], sort(colnames(theta.mat)) ]+0.0000001)
Expr.JSD.theta = Expr.JSD.theta/500
for ( i in 1:500) Expr.JSD.theta = JSD(est.phi.mat[i,]+0.0000001, theta.mat[i], ) ]+0.0000001)
Expr.JSD.theta = Expr.JSD.theta/500
for ( i in 1:500) Expr.JSD.theta = JSD(est.phi.mat[i,]+0.0000001, theta.mat[i, ]+0.0000001)
Expr.JSD.theta = Expr.JSD.theta/500
for ( i in 1:num.communites) Expr.JSD.theta = JSD(est.phi.mat[i,]+0.0000001, theta.mat[i, ]+0.0000001)
Expr.JSD.theta = Expr.JSD.theta/num.communities
for ( i in 1:num.communities) Expr.JSD.theta = JSD(est.phi.mat[i,]+0.0000001, theta.mat[i, ]+0.0000001)
Expr.JSD.theta = Expr.JSD.theta/num.communities
Expr.JSD.theta
est.phi.mat
theta.mat
est.phi
est.phi.mat
results$Count.T.G[[20]]
results_theta=t(results$Count.T.G[[20]])
results_theta
theta.mat
for ( i in 1:num.communities) results_theta[i,] = results_theta[i,] / sum(results_theta[i,])
results_theta
theta.mat
est.phi.mat est.phi.mat = t(results$Count.T.G[[20]])
for ( i in 1:6) est.phi.mat[i,] = est.phi.mat[i,] / sum(est.phi.mat[i,])
pi.mat
pi.mat
phi.mat
est.phi.mat
est.pi.mat
est.pi.mat
test.num = dim(results$test.X[[1]])[1]
est.pi.mat = results$test.X[[20]]
for ( i in 1:test.num) est.pi.mat[i,] = est.pi.mat[i,] / sum(est.pi.mat[i,])
est.pi.mat
envs.names
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
test.num = dim(results$test.X[[1]])[1]
est.pi.mat = results$test.X[[20]]
for ( i in 1:test.num) est.pi.mat[i,] = est.pi.mat[i,] / sum(est.pi.mat[i,])
for ( i in 1:test.num) Expr.JSD.pr = JSD(est.pi.mat[i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD.pr = Expr.JSD.pr/test.num
Expr.JSD.pr
load("/Volumes/VERBATIM HD/SourceTrackerNEXT/simulatedData/S200/E4/OTU500/C5/theta-1/phi-0.01/simulation-info.RData")
alpha.phi
alpha.theta
pi.mat
theta.mat
phi.mat
pi.mat
phi.mat
theta.mat
load("/Volumes/VERBATIM HD/SourceTrackerNEXT/simulatedData/S200/E4/OTU500/C5/theta-1/phi-0.01/SourceTrackerNEXT-Exp.RData")
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
test.num = dim(results$test.X[[1]])[1]
est.pi.mat = results$test.X[[20]]
for ( i in 1:test.num) est.pi.mat[i,] = est.pi.mat[i,] / sum(est.pi.mat[i,])
for ( i in 1:test.num) Expr.JSD.pr = JSD(est.pi.mat[i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD.pr = Expr.JSD.pr/test.num
Expr.JSD.pr
pi.mat
phi.mat
round(phi.mat),3
round(phi.mat,3)
est.phi.mat
est.pi.mat
metadata
pi.mat
pi.mat
desc
desc[2]
desc[3]
phi.mat
pi.mat
est.pi.mat
Expr.JSD.pr
est.pi.mat = results$test.X[[2]]
for ( i in 1:test.num) est.pi.mat[i,] = est.pi.mat[i,] / sum(est.pi.mat[i,])
for ( i in 1:test.num) Expr.JSD.pr2 = JSD(est.pi.mat[i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD.pr2 = Expr.JSD.pr2/test.num
Expr.JSD.pr2
JSD <- function(A,B){
return ( sum(A*log(A/((A+B)/2))) + sum(B*log(B/((A+B)/2))) ) /2
}
test.num = dim(results$test.X[[1]])[1]
est.pi.mat.lst = list()
draws.num = length(results$test.X)
for (draw in 1:draws.num){
est.pi.mat.lst[[draw]] = results$test.X[[draw]]
for ( i in 1:test.num) est.pi.mat.lst[[draw]][i,] = est.pi.mat.lst[[draw]][i,] / sum(est.pi.mat.lst[[draw]][i,])
}
Expr.JSD.list = rep(0, draws.num)
for (draw in 1:draws.num){
for ( i in 1:test.num) Expr.JSD.list[draw] = Expr.JSD.list[draw] + JSD(est.pi.mat.lst[[draw]][i,]+0.0000001, pi.mat[test.ix[i], sort(colnames(pi.mat)) ]+0.0000001)
Expr.JSD.list[draw] = Expr.JSD.list[draw]/test.num
}
Expr.JSD.list
alpha.phi
alpha.thet
alpha.theta
phi.mat
load("~/Documents/project/coastal_ocean_bedford_basin/new_data_aug_2013/train_by_depth/predictionImage_trained_by1m_test_1by1.RData")
alpha.theta
load("~/Documents/project/moving_picture_results/training_without_mislabeled/trainImages/2008-12/trainImage.RData")
test.draws
View(alpha.theta.mat.train)
alpha.theta.mat.train
alpha.phi.train
alpha.theta.mat.train
alpha.theta.mat.train[20]
alpha.phi.train
q90
q()
load("~/Documents/project/biomico_simulations/SourceTrackerNEXT-Exp.RData")
q()
q()
setwd("/Users/kathy/Documents/project/current_microbiome/BIoMiCo_scripts/for_release/BioMiCo")
load("trainImage.RData")
alpha.theta.mat.train
alpha.phi= alpha.phi.train[[1]]
for ( i in 2:20)
alpha.phi = alpha.phi + alpha.phi.train[[i]]
alpha.phi = alpha.phi / 20.0
alpha.phi
write.table(alpha.phi.train, file="alpha.phi.train_40_2000", append=FALSE, quote=TRUE, sep="\t", eol="\n", row.names=TRUE, col.names=TRUE)
est.rho=t(Count.G.V[[1]])
for ( i in 2:20)
est.rho = est.rho + t(Count.G.V[[i]])
est.rho = est.rho / 20.0
for(i in 1:4) est.rho[i,]=(est.rho[i,]+0.01)/sum(est.rho[i,]+0.01)
sum(est.rho[1,])
write.table(est.rho, file="rho_results", append=FALSE, quote=TRUE, sep="\t", eol="\n", row.names=TRUE, col.names=TRUE)
q()
